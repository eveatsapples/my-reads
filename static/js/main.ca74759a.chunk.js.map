{"version":3,"sources":["BooksAPI.js","Book.js","Search.js","MyBookshelf.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Book","state","_this2","this","react_default","a","createElement","className","style","width","height","backgroundImage","props","thumbnail","src","alt","defaultValue","onChange","e","addToList","target","value","disabled","title","authors","Component","Search","results","noResults","updateSearch","_this","setState","submitSearch","preventDefault","BooksAPI","response","length","forEach","bookData","prevState","toConsumableArray","Link","to","onSubmit","type","placeholder","map","index","src_Book","key","imageLinks","MyBookshelf","currentlyReading","wantToRead","read","BooksApp","showSearchPage","getAllResults","booksData","whichBook","whichList","console","log","Route","exact","path","render","src_MyBookshelf","src_Search","React","ReactDOM","BrowserRouter","basename","process","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ca74759a.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from 'react';\n// import * as BooksAPI from './BooksAPI'\nimport './App.css'\n\nclass Book extends Component {\n  state = {\n  }\n\n  render() {\n    return (\n      <div className=\"search-books\">\n        <div className=\"book\">\n          <div className=\"book-top\">\n            <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: this.props.thumbnail }}>\n              <img src={this.props.thumbnail} alt=\"book cover\" className=\"thumbnails\"/> \n            </div>\n            <div className={\"book-shelf-changer \" + this.props.shelf}>\n              <select defaultValue={this.props.shelf} onChange={((e) => this.props.addToList(this.props, e.target.value))}>\n                <option value=\"move\" disabled>Move to...</option>\n                <option value=\"currentlyReading\">Currently Reading</option>\n                <option value=\"wantToRead\">Want to Read</option>\n                <option value=\"read\">Read</option>\n                <option value=\"none\">None</option>\n              </select>\n            </div>\n          </div>\n          <div className=\"book-title\">{this.props.title}</div>\n          <div className=\"book-authors\">{this.props.authors}</div>\n        </div>\n      </div>\n\n    )\n  }\n}\n\nexport default Book\n","import React, { Component } from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport { Link } from 'react-router-dom';\nimport './App.css';\nimport Book from './Book';\n\nclass Search extends Component {\n  state = {\n    query: \"\",\n    results: [],\n    noResults: false,\n  }\n\n  updateSearch = (e) => {\n    this.setState({ query: e.target.value })\n  }\n\n  submitSearch = (e) => {\n    e.preventDefault()\n    BooksAPI.search(this.state.query)\n      .then(response => {\n        this.setState({ results: [] })\n        return response\n      })\n      .then(response => {\n        if(response.length > 0) {\n          response.forEach((bookData) => {\n            this.setState((prevState) => ({ results: [...prevState.results, bookData]}))\n            this.setState({ noResults: false })\n          })\n        } else {\n          this.setState({ noResults: true })\n        }\n      })\n      .then(\n        this.setState({ query: \"\" })\n      )\n      .then(() => {\n        if(this.state.results.length === 0) {\n          this.setState({ noResults: true })\n        } else {\n          this.setState({ noResults: false })\n        }\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link to=\"/\" className=\"close-search\">close</Link>\n          <div className=\"search-books-input-wrapper\">\n            {/*\n              NOTES: The search from BooksAPI is limited to a particular set of search terms.\n              You can find these search terms here:\n              https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n              However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n              you don't find a specific author or title. Every search is limited by search terms.\n            */}\n            <form onSubmit={this.submitSearch}>\n              <input\n                type=\"text\"\n                placeholder=\"search by title or author\"\n                onChange={this.updateSearch}\n                value={this.state.query}\n              />\n            </form>  \n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          {this.state.noResults === true &&\n            <div className=\"cant-find-any-results\">try something else</div>\n          }\n          <ol className=\"books-grid\">\n            {\n              this.state.results.map((book, index) => (\n                <li>\n                  <Book \n                    key={index}\n                    id={book.id}\n                    title={book.title}\n                    authors={book.authors}\n                    thumbnail={book.imageLinks.thumbnail}\n                    addToList={this.props.addToList}\n                  />\n                </li>\n              ))\n            }\n          </ol>\n        </div>\n      </div>\n\n    )\n  }\n}\n\nexport default Search\n","import React, { Component } from 'react';\n// import * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport Book from './Book'\n\nclass MyBookshelf extends Component {\n  state = {\n    currentlyReading: [],\n    wantToRead: [],\n    read: [],\n  }\n\n  render() {\n    return (\n      <div className=\"my-bookshelf\">\n        <div className=\"list-books\">\n          <div className=\"list-books-title\">\n            <h1>MyReads</h1>\n          </div>\n          <div className=\"list-books-content\">\n            <div>\n              <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">Currently Reading</h2>\n                <div className=\"bookshelf-books\">\n                  <ol className=\"books-grid\">\n                    {\n                      this.props.currentlyReading.map((book, index) => (\n                        <li>\n                          <Book \n                            key={index}\n                            id={book.id}\n                            title={book.title}\n                            authors={book.authors}\n                            thumbnail={book.imageLinks.thumbnail}\n                            addToList={this.props.addToList}\n                            shelf=\"currently-reading\"\n                          />\n                        </li>\n                      ))\n                    }\n                  </ol>\n                </div>\n              </div>\n              <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">Want to Read</h2>\n                <div className=\"bookshelf-books\">\n                  <ol className=\"books-grid\">\n                    {\n                      this.props.wantToRead.map((book, index) => (\n                        <li>\n                          <Book \n                            key={index}\n                            id={book.id}\n                            title={book.title}\n                            authors={book.authors}\n                            thumbnail={book.imageLinks.thumbnail}\n                            addToList={this.props.addToList}\n                            shelf=\"want-to-read\"\n                          />\n                        </li>\n                      ))\n                    }\n                  </ol>\n                </div>\n              </div>\n              <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">Read</h2>\n                <div className=\"bookshelf-books\">\n                  <ol className=\"books-grid\">\n                     {\n                      this.props.read.map((book, index) => (\n                        <li>\n                          <Book \n                            key={index}\n                            id={book.id}\n                            title={book.title}\n                            authors={book.authors}\n                            thumbnail={book.imageLinks.thumbnail}\n                            addToList={this.props.addToList}\n                            shelf=\"read\"\n                          />\n                        </li>                   \n                      ))\n                     }\n                  </ol>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n\n    )\n  }\n}\n\nexport default MyBookshelf\n","import React from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport { Route, Link } from 'react-router-dom';\nimport './App.css'\nimport Search from './Search'\nimport MyBookshelf from './MyBookshelf'\n\nclass BooksApp extends React.Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    showSearchPage: false,\n    getAllResults: [],\n    currentlyReading: [],\n    wantToRead: [],\n    read: [],\n  }\n\n  componentDidMount() {\n    this.getAll()  \n  }\n\n  getAll = () => {\n    BooksAPI.getAll()\n      .then(response => {\n        return response\n      })\n      .then((response) => {\n        this.setState({\n          getAllResults: [],\n          currentlyReading: [],\n          wantToRead: [],\n          read: []\n        })\n        return response\n      })\n      .then(response => {\n        response.forEach((booksData) => {\n          this.setState((prevState) => ({ getAllResults: [...prevState.getAllResults, booksData]}))\n        })\n      })\n      .then(() => {\n        this.state.getAllResults.forEach((book) => {\n          if(book.shelf === \"currentlyReading\") {\n            this.setState((prevState) => ({ currentlyReading: [...prevState.currentlyReading, book]}))\n          } else if(book.shelf === \"wantToRead\") {\n            this.setState((prevState) => ({ wantToRead: [...prevState.wantToRead, book]}))\n          } else if(book.shelf === \"read\") {\n            this.setState((prevState) => ({ read: [...prevState.read, book]}))\n          }\n        })\n      })\n  }\n\n  addToList = (whichBook, whichList) => {\n    console.log(whichList)\n    BooksAPI.update(whichBook, whichList)\n      .then(() => {\n        this.getAll()\n      })\n    //.then(() => {\n    //  if(whichList === \"currentlyReading\") {\n    //    console.log(whichBook)\n    //    this.state.currentlyReading.forEach((book) => {\n    //      this.setState(() => ({ shelf: \"currentlyReading\" }))\n    //    })\n    //  }\n    //})\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Route exact path=\"/\" render={() => (\n          <div>\n            <Link\n              key=\"link to search\"\n              to=\"/search\"\n              className=\"open-search\"\n            ><button>Add a book</button>\n            </Link>\n            <MyBookshelf\n              key=\"bookshelf\"\n              addToList={this.addToList}\n              currentlyReading={this.state.currentlyReading}\n              wantToRead={this.state.wantToRead}\n              read={this.state.read}\n            />\n          </div>\n        )} />\n\n        <Route exact path=\"/search\" render={() => (\n          <div>\n            <Link\n              key=\"link to home\"\n              to=\"/\"\n              className=\"link\"\n            ><button className=\"close-search ontop\">Close</button>\n            </Link>\n            <Search\n              key=\"search\"\n              addToList={this.addToList}\n              currentlyReading={this.state.currentlyReading}\n              wantToRead={this.state.wantToRead}\n              read={this.state.read}\n            />\n          </div>\n        )} />\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n  <App />\n  </BrowserRouter>\n  , document.getElementById('root'));\n"],"sourceRoot":""}